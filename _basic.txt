_basic.txt

컴파일 언어
 - C, C++, Java, C# 등
 - 개발자가 코딩한 코드를 컴파일하여 컴퓨터가 실행할 수 있는 파일로 만든 후 실행시킴
 - 개발속도가 느리고, 실행속도가 빠름

인터프리터 언어
 - ASP, PHP, VB, Python
 - 개발자가 코딩한 코드를 한 줄씩 해석하여 실행시키는 언어
 - 개발속도가 빠르고, 실행속도가 느림

용어정리
표현식(expression) : 값을 구하는 수식 또는 코드
문장(statement) : 표현식을 모아 놓을 것
프로그램(program) : 문장들을 모아 놓을 것
키워드(keyword) : 예약어 똔느 명령어들로 이것으로 이름을 지으면 안됨
식발자(identifier) : 변수나 함수 등의 이름을 의미하며 유일한 값임
 - 키워드를 이름으로 사용하면 안됨
 - 특수문자는 언더바(_)만 가능(이름은 영문, 숫자, 언더바 만으로 짓는것이 좋다)
 - 첫글자는 영문으로 해야 함
 - 공백을 포함할 수 없음
 - 영문외에 다른 언어도 사용할 수 있으나 권장하지 않음
 - 조금 길더라도 의미있는 영문 단어를 사용해야 함
 - 두 단어 이상으로 조합해서 이름을 지을 경우 스네이크 케이스와 카멜 케이스 중 택일
    스네이크 케이스 : 단어 사이를 언더바로 연결 - member_info (첫글자가 소문자)
        - 주로 변수나 함수 등에서 사용됨(이름 뒤에 괄호의 유무로 없으면 변수, 있으면 함수)
    카멜 케이스 : 단어들의 첫글자를 대문자로 하여 연결 - MemberInfo (첫글자가 대문자)
        - 클래스에서 주로 사용됨

주석(comment) : 프로그램 실행에 영향을 주지 않고, 코드를 설명하기 위한 기능
 - # 기호를 붙여 주석임을 나타냄
 - 될 수 있으면 많은 주석을 달아 놓는 것이 좋다_basic.txt

 출력 - print() : 화면상으로 특정 메세지나 값을 보여주는 기능
  - print([출력1, 출력2, ..., 출력n])
    괄호안의 데이터(들)을 출력해줌 : 출력되는 값은 하나일수도 여럿일수 수도, 아예 없을수도 있음
    괄호안의 데이터가 여럿일 경우 여러 개의 데이터를 모두 합하여 출력
    괄호안의 데이터가 없을 경우 내용 출력대신 한 줄 내림을 함

자료형(data type)
 - 기능과 열할 등에 따라 구분지어 놓은 자료의 종류
 - 기본 자료형
  불리언(boolean) : 논리값으로 true와 false 두가지가 있음(조건으로 사용됨)
  숫자(number) : 정수와 실수 모두 포함
  문자열(string) : 문자들을 모아놓은 것
 - 특정 자료의 자료형을 알기 위해서는 type() 함수를 사용함
    예) tpye(자료형을 측정할 자료)

문자열(string)
 - 따옴표(큰 따옴표와 작은 따옴표 모두 사용)로 묶어서 다른 자료들과 구분
 - 문자열 안에서 따옴표를 표현하려면 큰따옴표 안에서는 작은 따옴표를, 작은 따옴표 안에서는 큰 따옴표를 사용하면 됨
    예) "'안녕하세요' 라고 말했습니다."
        "\"안녕하세요\" 라고 말했습니다."
    이스케이프 문자를 이요하면 좀 더 편하게 작업 가능
 - 이스케이프 문자: 백슬래시와 함께 입력되는 특수한 기능의 문자들 - 웹페이지에서는 사용불가
   \문자 : 해당 문자를 있는 그대로 출력해줌(한글자만)
   \t : 키보드의 탭키와 같은 기능
   \n : 줄바꿈 기능(문자열에서 줄을 바꿀때 사용하기도 하지만 """를 사용하는 경우가 더 많음)

- 여러 줄 문자열 : 문자열을 여러 줄로 표현하는 기능으로 타 언어에는 없는 기능
    """\
    여러 줄의 문자열 입력 1
    여러 줄의 문자열 입력 2
    여러 줄의 문자열 입력 3\
    """
    '\'를 입력하면 여러 줄 문자열의 위아래로 한 줄씩 비는 현상을 없앨 수 있음

문자열의 연산자
 - 문자열 연결 연산자 : +
    문자열 끼리 서로 이어주는 역할을 함 - 여러 문자열을 하나의 문자열로 만들어 줌
 - 문자열 반복 연산자 : *
    특정 문자열을 지정한 횟수만큼 반복해서 출력
    문법) 문자열 * 횟수 or 횟수 * 문자열 - 위치를 바꿔도 동작

 - 문자 선택 연산자 - 인덱싱
    문자열에서 지정한 인덱스에 해당하는 문자를 잘라서 가져옴
    문법) "문자열"[인덱스번호] -> 지정한 인덱스의 문자를 추출
    예) "abcd efg hij"[3] -> "d", "abcd efg hij"[4] -> " "
    인덱스 번호 자리에 음수를 임력할 수도 있음(0이 아닌 -1부터 시작)
    예) "abcd efg hij"[-1] -> "j", "abcd efg hij"[-9] -> "d"

 - 문자열 범위 선택 연산자 - 슬라이싱
    문자열에서 지정한 범위에 속하는 문자열을 잘라서 가져옴
    문법) "문자열"[시작인덱스:종료인덱스-1] -> 지정한 범위의 문자열 추출
    예) "abcd efg hij"[1:4] -> "bcd"
    시작 인덱스는 범위에 있지만, 종료 인덱스가 범위를 벗어날 경우 시작 인덱스 부터 끝까지 잘라옴
    예) "abcd efg hij"[1:40] -> "bcd efg hij"
    시작 인덱스와 종료 인덱스 모두 범위를 벗어날 경우 빈 문자열을 잘라옴
    예) "abcd efg hij"[30:40] -> ""
    시작 인덱스보다 종료 인덱스가 작을 경우 빈 문자열을 잘라옴
    예) "abcd efg hij"[11:4] -> ""
    시작 인덱스보다 종료 인덱스가 작은데 음수인 경우 종료인덱스의 음수를 문자열 마지막 인덱스에서 뺀 
    인덱스 번호로 지정하여 문자열을 잘라옴
    예) "abcd efg hij"[9:-1] -> "hi"

    시작이나 종료 인덱스를 생략할 경우 처음이나 끝까지 잘라옴
    예) "abcd efg hij"[3:] -> "d efg hij"
    예) "abcd efg hij"[:3] -> "abc"

 - 문자열의 길이
    문자열에서 문자의 개수를 구하는 함수
    문법) len(문자열) -> 지정한 문자열의 문자 개수를 가져옴
    len()함수로 구한 문자열 개수는 문자열의 마지막 인덱스 +1과 같음

숫자(number)
 - 숫자는 정수(음수, 양수, 0)와 실수(소수점인 숫자)로 나뉨
 - 각각 자료형을 int(integer, 정수)와 float(floating point, 실수)으로 표기함
 예) 10 -> 정수, 10.0 -> 실수
 - 산술연산자 :  + - * / % ** //
    숫자로 연산하는 연산자로 피연산자가 숫자이며, 결과값도 숫자로 나옴
    + - * / : 사칙연산의 연산자들로 덧셈,  뺄셈, 곱셈, 나눗셈을 의미
    % : 나머지 연산자로 나눗셈 후 몫이 아닌 나머지를 구하는 연산자
     - 나눗셈 후 나머지를 이용하여 몇가지 상태를 반복할 때 사용
     예) 10 % 3 => 1
    ** : 거듭제곱을 계산
    예) 2 ** 3 -> 8
    // : 나눗셈 연산시 실수가 아닌 정수로만 연산
    예) 5 / 2 -> 2.5, 5 // 2 -> 2

변수(Variable)
 - 특정 값을 저장할 수 있는 메모리 공간
 - 안에 들어있는 값은 변경이 가능함
 - 파이썬의 변수에는 모든 자료형이 들어갈 수 있음
 - 문법
 변수명 = 변수에 넣을 값
 - 변수명은 예약어를 피해서 좀 길더라도 의미있는 영단어를 사용
 - 파이썬에서의 변순느 자료형을 따로 지정하지 않으므로 여러 종류의 자료를 저장할 수 있지만 될 수 있으면
   한가지 자종류의 자료만 넣도록 하는것이 좋다

 - 복합 대입 연산자
   대입 연산자(=)와 산술연산자를 합하여 만든 연산자로 아예 사용하지 않아도 프로그래밍을 하는 데 큰
   영향을 끼치지 않음
   +=, -=, *=, /=, %=, **=
   예) a += 10 는 a = a + 10와 동일

사용자 입력 : input() 함수
 - 사용자로부터 특정 문자열을 입력받는 함수
 - 입력받은 값을 변수에 저장할 수도 있음
 - 문법
변수명 = input(사용자에게 보여줄 문자열) -> 사용자가 입력한 값이 저장한 변수에 저장됨
 - input 함수로 받은 값은 무조건 문자열로 받아짐

문자열을 숫자로 형변환 시키는 int(), float() 함수
 - 문자열을 정수나 실수로 변환시키는 기능
   단, 문자열은 진짜 글자가 아닌 숫자로 이루어진 문자열이어야 한다
 - 문법
 int(정수로 변환할 문자열), float(실수로 변환할 문자열)
 int(3.14) -> 3, int("3.14") -> 오류 발생
 int() 함수로는 실수를 정수로 변환 할 수 있으나 문자열 형태의 실수는 불가
 float(3) -> 3.0, float("3") -> 3.0

 숫자를 문자열로 변환시키는 str()함수
  - 문법
str(123) -> "123", str(123.456) -> "123.456"

날짜/시간 활용
 - 날짜 및 시간을 사용하려면 import datetime을 한 후 작업해야 함
 - 오늘 날짜 및 현재시간은 datetime.datetime.now()으로 구함
 예) print(datetime.datetime.now()) # 2021-03-22 21:51:29.712834
     초는 micro second 까지 구함
 - 년월일 시분초 단위로 사용
   now = datetime.datetime.now()
   now.year, now.month, now.day #년, 월, 일
   now.hour, now.minute, now.second, now.microsecond 시, 분, 초, 밀리초
 - 날짜/시간 데이터를 자르면 그 값은 int형으로 변환됨