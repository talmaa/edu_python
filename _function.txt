_function.txt

문자열의 format() 함수
 - 숫자를 문자열로 변환하면서 몇가지 옵션을 추가해 주는 함수
 - 문법
"{}문자열".format(숫자) -> 중괄호에 지정한 숫자가 들어가면서 문자열로 변환됨
중괄호는 여러개를 사용할 수 있으며 반드시 중괄호의 개수만큼 숫자가 있어야 함
"{}{}...{}".format(data 1, data 2, ..., data n)
예) "{}세기는 {}년 부터 {}년 {}입니다.".format(20, 1901, 2000, "까지")
    -> "20세기는 1901년 부터 2000년 까지입니다."

대소문자 변경 함수
 - upper() : 문자열에서 소문자인 글자들을 대문자로 변경시킴
 - lower() : 문자열에서 대문자인 글자들을 소문자로 변경시킴
 - 두 함수 모두 원본을 바꾸는 것이 아닌 새로운 문자열로 리턴하는 함수

공백제거 함수 : trim 기능
 - 문자열의 양쪽 끝에 있는 공백을 제거하는 함수
 - strip() : 문자열의 양쪽 끝에 있는 문자열을 제거
    사용자가 입력하는 데이터에 대해 strip() 함수를 사용하는 경우가 많다
 - lstrip() : 문자열의 왼쪽 끝에 있는 문자열을 제거
 - rstrip() : 문자열의 오른쪽 끝에 있는 문자열을 제거
 - 세 함수 모두 원본을 바꾸는 것이 아닌 새로운 문자열로 리턴하는 함수

 문자열의 구성 검사 함수 : 리턴값이 논리값인 함수들로 조건으로 사용 가능
  - isalnum() : 문자열이 글자과 숫자로만 구성되었는지 여부를 리턴
  - isalpha() : 문자열이 글자로만 구성되었는지 여부를 리턴
  - isdecimal() : 문자열이 정수로만 구성되었는지 여부를 리턴
  - isdigit() : 문자열이 정수로 인식될 수 있는지 여부를 리턴
  - isspace() : 문자열이 공백으로만 구성되었는지 여부를 리턴
  - islower() : 문자열이 소문자로만 구성되었는지 여부를 리턴
  - isupper() : 문자열이 대문자로만 구성되었는지 여부를 리턴

문자열 찾기 함수
 - 문자열 내에서 특정 문자나 문자열을 찾아 인덱스를 리턴하는 함수
    특정 문자(열)의 존재 여부도 판단할 수 있음
 - find() : 지정한 문자(열)의 위치를 왼쪽 부터 찾기 시작하는 함수
 - rfind() : 지정한 문자(열)의 위치를 오른쪽 부터 찾기 시작하는 함수
 - 지정한 값을 찾지 못했을 경우 -1을 리턴

 in 연산자
  - 문자열 내에 특정 문자(열)을 포함하는지 여부를 리턴하는 키워드
  - 문법
"찾는 문자열" in "원본 문자열"

문자열 자르기 함수
 - 문자열을 특정 구분자를 이용하여 잘라내어 리스트로 리턴하는 함수
 - 문법
 문자열.split("구분자") : 문자열을 지정한 구분자를 기준으로 잘라 리스트로 리턴

 비교 연산자
  - 두 값을 서로 비교하여 그 결과값을 논리값(bool, boolean, 불, 부울 값)으로 리턴하는 연산자
  - ==(같다), !=(같지않다), >(크다), >=(크거나 같다), < (작다), <=(작거나 같다)
  - 피연산자는 숫자뿐만 아니라 문자열도 가능(문자열의 크기 비교도 가능)
  - 문자열 비교시 대문자가 소문자보다 작게 비교됨(ANSI 코드값으로 비교하기 때문)
  - 대소문자 상관 없이 비교하려면 upper()나 lower()함수르 이용하여 비교하려는 값 모두 대문자나
   소문자로 일괄적으로 만들어 놓고 비교해야 정확한 비교가 가능

논리 연산자
 -  두 논리값(조건식)을 연산하여 하나의 논리값으로 만들어 주는 연산자
 - and : 논리 곱. 여러 조건들 중 하나라도 거짓이면 전체가 거짓이 되는 연산자
         참이 되려면 모든 조건이 참이여야 함
 - or : 논리합.  여러 조건들 중 하나라도 참이면 전체가 참이 되는 연산자
         거짓이 되려면 모든 조건이 거짓이여야 함
 - not : 부정.  참을 거짓으로 거짓을 참으로 전환하는 연산자

 제어문
  - 프로그램은 기본적으로 위에서 아래로, 왼쪽에서 오른쪽으로 실행이 되며, 그 순서를
    잠깐이나마 변경하여 원하는 방향으로 실행되게 하는 것이 흐름 제어문이라고 한다
  - 제어문은 분기문과 반복문으로 이루어져 있음

1. 분기문
 - 조건을 주어 조건이 참일 경우와 거짓을 경우 각각 다른 작업을 진행하게 하는 제어문
 - if문으로 모든 프로그래밍 언어에 동일하게 존재하는 대표적인 분기문임