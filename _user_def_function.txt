사용자정의함수
 - 개발자가 직접 정의하여 사용하는 함수
 - 최소 두 번이상 동일한 작업을 하는 경우 그 작업을 함수로 만들어 사용하기 편하게 하는 것
 - 함수에서 작업하는 데 필요한 데이터들을 받아 올 수 있는데 이런 것들을 매개변수라고 함
	매개변수, 인수, 파라미터(parameter), 아규먼트(argument) 등으로 불리우기도 함
 - 함수에서 작업한 결과를 함수를 호출한 곳으로 다시 보내기도 하는 데 이때 보내는 값을 리턴값이라 함
 - 함수는 종료 후에는 함수를 호출한 곳이나 그 다음 명령으로 이동함

 - 문법
def 함수명([매개변수들]) :
	함수의 실행문(들)
 - 함수의 매개변수는 함수에 따라 존재할 수도 안 할 수도 있음
 - 매개변수가 여러 개일 경우 쉼표로 구분하여 여러 개의 매개변수를 지정할 수 있음
	매개변수의 순서에 맞춰 입력해야 하며 개수가 틀리면 오류발생

 - 특이한 매개변수들
	가변 매개변수
	 - 매개변수의 개수를 가변적으로 사용할 수 있는 매개변수
	 - 가변 매개변수 뒤에는 일반 매개변수를 사용할 수 없음
	 - 가변 매개변수는 하나만 사용할 수 있음
	 - 문법 : def 함수명(매개변수1, 매개변수2, ... , *가변매개변수) :
	 - 가변 매개변수는 개수에 상관없이 입력할 수 있으며, 심지어 생략해도 됨
	 - 자료형에 상관없이 문자열, 숫자, 논리값 등을 섞어서 넣어도 됨

	기본 매개변수
	 - 입력하지 않은 경우 자동으로 지정된 값으로 처리하는 매개변수
	 - 기본 매개변수 뒤에는 일반 매개변수를 사용할 수 없음
	 - 문법 : def 함수명(매개변수1, 매개변수2, ... , 기본매개변수=값) :

	기본 매개변수가 가변 매개변수보다 앞에 있을 경우
	 - 기본 매개변수의 값을 입력시 : 가변 매개변수와 구분이 되어 정상적으로 동작
	 - 기본 매개변수의 값을 생략시 : 가변 매개변수의 첫번째 값을 기본 매개변수의 값으로 사용함

	기본 매개변수가 가변 매개변수보다 뒤에 있을 경우
	 - 기본 매개변수의 값을 지정하더라도 가변 매개변수의 값으로 사용됨
	 - 즉, 기본 매개변수에는 값을 넣을 수 없게 됨

	키워드 매개변수
	 - 기본 매개변수와 가변 매개변수를 같이 사용할 수 있게 해줌
	 - 함수 호출시 매개변수의 이름 직접 입력해서 다른 매개변수와의 혼동을 막음
	 - 문법 : 함수명(값1, 값2, ... , 변수명=값3, 변수명=값4)
	 - 함수 정의시 지정한 매개변수의 순서를 무시하고 값을 넣어도 됨
		값 입력시 매개변수의 이름을 지정하므로 순서에 상관없음
		중간에 기본 매개변수가 있을 경우 생략하고 뒤의 매개변수 명을 사용해도 됨


사용자 정의 함수의 리턴
 - 리턴(return) 명령을 사용하면 무조건 함수를 종료시킨 후 함수를 호출했던 곳으로 이동함
 - 함수의 중간에 리턴 명령이 있어도 함수는 종료됨
 - 리턴 명령 뒤에 특정 데이터를 입력하면 그 데이터가 함수를 호출한 곳으로 보내짐
 - 문법 : return 값
 - 아무 값도 없이 return을 하면 파이썬에서는 None값을 리턴하게 됨


튜플(tuple)
 - 리스트와 비슷한 자료형으로 대괄호[]가 아닌 소괄호()를 사용함
 - 리스트는 값을 수정 및 삭제가 가능하나 튜플은 수정 및 삭제가 불가
 - 문법
튜플명 = (값1, [값2, ... , 값n])
 - 하나의 값으로 튜플을 생성할 경우 반드시 값뒤에 쉼표를 입력해야 함(두 개이상은 쉼표로 끝나지 않음)
 - 튜플안에 다른 튜플을 넣을 수도 있음
 - 튜플 사용
	인덱싱
	 - '튜플명[인덱스]' 형식으로 튜플의 값을 참조
	슬라이싱
	 - '튜플명[시작인덱스:종료인덱스]' 형식으로 잘라서 사용가능
		시작인덱스 부터 종료인덱스 - 1 까지 잘라 튜플로 리턴
		시작인덱스 생략시 0번 부터 시작하고, 종료인덱스 생략시 끝까지 잘라옴
	덧셈
	 - 두 튜플을 더하면 하나의 합쳐진 튜플로 리턴됨
		예) 튜플1 + 튜플2 -> 튜플1과 튜플2가 합해진 새로운 튜플로 생성됨
	 - 튜플에 정수를 더할 수는 없음
	곱셈
	 - 튜플에 곱한 수 만큼 튜플을 반복시킨 새로운 튜플을 생성
		예) 튜플 * 정수 -> 튜플이 곱한 수 만큼 반복된 새로운 튜플생성
	 - 튜플과 튜플을 곱할 수는 없음
	튜플의 길이
	 - len()함수로 튜플의 길이(데이터의 개수)를 구할 수 있음
		예) len(튜플명) -> 해당 튜플내의 데이터 개수
	괄호 없이 데이터들만 입력해도 튜플로 인정해줌
	 - 튜플명 = 값1, 값2, ... , 값n
	튜플과 리스트에서의 특이한 변수사용
	 - 튜플과 리스트 모두에서 변수에 값을 할당할 때 여러 개의 변수에 값을 한 줄로 입력할 수 있음
		예) [변수명1, 변수명2] = [값1, 값2]
			(변수명1, 변수명2) = (값1, 값2) 또는 괄호 없이
			변수명1, 변수명2 = 값1, 값2
			변수1, 변수2 = 변수2, 변수1 # 변수1과 변수2의 값을 서로 맞바꿈

 - 튜플은 함수의 리턴값으로 많이 사용됨
	여러 개의 값을 리턴하고 할당할 수 있기 때문
	 - 튜플로 괄호없이 리턴을 하면 여러 개의 값을 리턴하는 것 처럼 보일 수 있음
	 - 그 값들을 여러 개의 변수에 나누어 받아 사용할 수 있음
	예)
	def test2() :
		return 30, 40, 50 # 괄호없는 튜플로 값을 리턴(튜플만 가능)
	a, b, c = test2() # test2() 함수의 결과값을 a와 b, c에 각각 나누어 저장
	a = test2() # a = (30, 40, 50) - 하나의 변수만 지정하면 튜플로 받음


람다(lambda)
 - 함수를 간단하게 선언하는 방법
 - 문법 : lambda 매개변수1, 매개변수2, ... , 매개변수n : 매개변수를 이용한 표현식

 - map() 함수
	함수를 매개변수로 보낼때 보내지는 함수의 매개변수로 리스트를 같이 보내줌
	실행결과를 리스트로 리턴받는 함수
	문법 : map(함수명, 리스트명) -> 지정한 함수를 리스트의 요소 개수만큼 호출
	 - 리스트의 값들을 차례대로 함수의 매개변수로 가져가 실행
	 - map()함수의 결과는 리스트로 리턴받음
	 - 리스트는 함수의 매개변수 개수만큼 입력해야 함

 - filter() 함수
	함수를 매개변수로 보낼때 보내지는 함수의 매개변수로 리스트를 같이 보내줌
	리턴되는 값은 True인 것으로만 리스트를 구성해줌
	문법 : filter(함수명, 리스트명) -> 지정한 함수를 리스트의 요소 개수만큼 호출
	 - 리스트의 값들을 차례대로 함수의 매개변수로 가져가 실행
	 - filter()함수의 결과는 True인 것만 모아 리스트로 리턴받음
	 - 리스트는 함수의 매개변수 개수만큼 입력해야 함